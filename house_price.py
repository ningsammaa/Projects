# -*- coding: utf-8 -*-
"""House_Price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MZJDrGnPnFL-zRUvU9CctyAZr97-Ca44
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv("/content/drive/MyDrive/TechAxis/house_price_regression_dataset.csv")
df

len(df)

df.isnull().sum()

df.duplicated().sum()

df.describe()

df.info()

plt.figure(figsize = (6, 4))
sns.scatterplot(x = "Square_Footage", y = "House_Price", data = df)
plt.title("House Price vs Square Footage")
plt.xlabel("Square Footage")
plt.ylabel("House Price")
plt.show()

features = ["Square_Footage", "Num_Bedrooms", "Num_Bathrooms", "Neighborhood_Quality"]
target = ["House_Price"]

X = df[features]
Y = df[target]

X.head()

Y.head()

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 42 )

X_train, X_test, Y_train, Y_test

model = LinearRegression()

model.fit(X_train, Y_train)

y_pred = model.predict(X_test)
y_pred

r2 = r2_score(Y_test, y_pred)
print(f"R-squared (R2) Score: {r2}")

mean_squared_error = mean_squared_error(Y_test, y_pred)
print(f"The mean squared error: {mean_squared_error}")

years_to_predict = pd.DataFrame({"Square_Footage": [1400], "Num_Bedrooms": [3], "Num_Bathrooms": [2], "Neighborhood_Quality": [4]})
predicted_house_price = model.predict(years_to_predict)
print(f"The predicted house price: Rs.{predicted_house_price}")

plt.figure(figsize = (10, 6))
plt.scatter(Y_test, y_pred, alpha = 0.7, color = "blueviolet")
plt.plot([Y_test.min(), Y_test.max()], [Y_test.min(), Y_test.max()], color = "red", linestyle = "--")
plt.xlabel("Actual House Prices")
plt.ylabel("Predicted House Prices")
plt.title("Actual House Price")
plt.show()

for feature in features:
    plt.figure(figsize=(8, 6))
    plt.scatter(df[feature], df[target], alpha=0.7, color="lime")
    plt.title(f"{feature} vs {target}")
    plt.xlabel(feature)
    plt.ylabel(target)
    plt.show()

